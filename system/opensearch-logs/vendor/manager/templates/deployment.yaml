kind: Deployment
apiVersion: apps/v1
metadata:
  name: manager
  namespace: opensearch-logs
  labels:
    component: opensearch
    role: manager
spec:
  selector:
    matchLabels:
      component: opensearch
      role: manager
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        component: opensearch
        role: manager
      annotations:
        checksum/application.conf: {{ include  (print $.Template.BasePath "/_application.conf.tpl") . | sha256sum }}
        kubectl.kubernetes.io/default-container: "manager"
        {{- if and $.Values.global.linkerd_enabled $.Values.global.linkerd_requested }}
        linkerd.io/inject: enabled
        {{- end }}
    spec:
      nodeSelector:
        ccloud.sap.com/nodepool: {{.Values.global.nodepool}}
      volumes:
        - name: manager-etc
          configMap:
            name: manager-etc
        - name: manager-secrets
          secret:
            defaultMode: 420
            secretName: manager-secrets
        - name: admin-cert-manager
          secret:
            defaultMode: 420
            secretName: admin-cert-manager
        - name: dynamic-config
          emptyDir: {}
      initContainers:
        - name: credential-checker
          image: curlimages/curl:8.12.1
          command: ["/bin/sh", "-c"]
          args:
            - |
              # Read credentials from secrets
              user=$(cat /secrets/username)
              pass=$(cat /secrets/password)
              failover_user=$(cat /secrets/failover_username)
              failover_pass=$(cat /secrets/failover_password)

              # Create temporary .netrc files
              mkdir -p /tmp/netrc
              printf "machine opensearch-logs-client.opensearch-logs login %s password %s" \
                "$user" "$pass" > /tmp/netrc/auth1
              printf "machine opensearch-logs-client.opensearch-logs login %s password %s" \
                "$failover_user" "$failover_pass" > /tmp/netrc/auth2

              # Test credentials
              test_connection() {
                curl -s -o /dev/null -w "%{http_code}" \
                  --netrc-file "$1" \
                  --max-time 5 \
                  --fail \
                  "https://opensearch-logs-client.opensearch-logs:9200"
              }

              # Try credentials in sequence
              for auth in /tmp/netrc/auth1 /tmp/netrc/auth2; do
                if [ "$(test_connection $auth)" = "200" ]; then
                  echo "Using valid credentials from ${auth}"
                  valid_user=$(awk '/login/ {print $2}' $auth)
                  valid_pass=$(awk '/password/ {print $2}' $auth)
                  sed -e "s/USERNAME_PLACEHOLDER/$valid_user/g" \
                      -e "s/PASSWORD_PLACEHOLDER/$valid_pass/g" \
                      /secrets/application.conf > /dynamic-config/application.conf
                  exit 0
                fi
              done

              echo "All credential checks failed"
              exit 1
          volumeMounts:
            - name: manager-secrets
              mountPath: /secrets
            - name: dynamic-config
              mountPath: /dynamic-config
      containers:
      - name: manager
        image: {{.Values.global.registry}}/{{.Values.image_manager}}
        imagePullPolicy: IfNotPresent
        command:
          - /opt/cerebro/bin/cerebro
        args:
          - -Dconfig.file=/manager-etc/application.conf
          - -Dlogback.configurationFile=/manager-etc/logback.xml
          - -Dlogger.file=/manager-etc/logback.xml
          - -Dcom.sun.jndi.ldap.object.disableEndpointIdentification=true
          - -Des.networkaddress.cache.ttl=20
          - -Des.networkaddress.cache.negative.ttl=10
        env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        volumeMounts:
          - mountPath: /manager-etc/logback.xml
            name: manager-etc
            subPath: logback.xml
          - mountPath: /manager-etc/application.conf
            name: dynamic-config
            subPath: application.conf
          - mountPath: /opt/certs/ca.crt
            name: admin-cert-manager
            subPath: ca.crt
        ports:
          - name: manager
            containerPort: {{.Values.port_internal}}
